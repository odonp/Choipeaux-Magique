"""
Choixpeaux Magique


REGLES:


AUTEURS:
Malik Chouchane 
Samy Mouktadi Billah
Odon Prouille

LICENCE:



VERSION:



DATE DE DERNIERE REVISION:



ADRESSE GITHUB: 
https://github.com/odonp/Choixpeaux-Magique

"""


'''
Info pour les dev du groupe 

  Affichage attendu sous forme :
  
  Les voisins du profil inconnu ayant pour caractéristiques {......}
  -TRUC de la maison machin est a une distance de ...
  -TRUC de la maison machin est a une distance de ...
  -TRUC de la maison machin est a une distance de ...
  -TRUC de la maison machin est a une distance de ...
  -TRUC de la maison machin est a une distance de ...
  
  Le profil inconnu ayant les caractéristiques {......} est donc assigné à la maison machin
  
  
  
  Mettre des couleurs si possible, c'est plus visuel
'''



# coding: utf-8

#import des modules

import csv
from math import sqrt



#définition des constantes

poudlard_characters = []

profil_tab = \
    [{'Courage': 9,'Ambition': 2,'Intelligence': 8,'Good': 9},
     {'Courage': 6,'Ambition': 7,'Intelligence': 9,'Good': 7},
     {'Courage': 3,'Ambition': 8,'Intelligence': 6,'Good': 3},
     {'Courage': 2,'Ambition': 3,'Intelligence': 7,'Good': 8},
     {'Courage': 3,'Ambition': 4,'Intelligence': 8,'Good': 8}]


#définition des variables 

poudlard_characters = []


#définition des fonctions dans l'ordre d'utilisation



#! La valeur de k sera fixée à 5 par défaut. !#



'''
Début du programme 1ere partie
'''


#ouvre le csv "Characters"
with open("Characters.csv", mode='r', encoding='utf-8') as f:
    reader = csv.DictReader(f, delimiter=';')
    characters_tab = [{key : value for key, value in element.items()} for element in reader]
    

#ouvre le csv "Caracteristiques_des_persos"
with open("Caracteristiques_des_persos.csv", mode='r', encoding='utf-8') as f:
    reader = csv.DictReader(f, delimiter=';')
    caractéristique_tab = [{key : value for key, value in element.items()} for element in reader]




# On fait la fusion en rajoutant la maison de chaque personnage
for poudlard_character in caractéristique_tab:
    for kaggle_character in characters_tab:
        if poudlard_character['Name'] == kaggle_character['Name']:
            poudlard_character['House'] = kaggle_character['House']
            poudlard_characters.append(poudlard_character)

print(poudlard_characters)



def choixpeau_magique(tab_caractere , profil_carateristique):
    
    for perso in tab_caractere:
        difference = 0
        for caracteristique in profil_carateristique:
            difference += abs(int(perso[caracteristique]) - profil_carateristique[caracteristique])
        perso['Difference'] = difference
    
    
    tab_caractere.sort(key= lambda x: x['Difference'])
    print(tab_caractere)
    
'''
choixpeau_magique(poudlard_characters, test_tab[0])
poudlard_characters.append(poudlard_character)

'''




test_tab = \
    [{'Courage': 9,'Ambition': 2,'Intelligence': 8,'Good': 9},
     {'Courage': 6,'Ambition': 7,'Intelligence': 9,'Good': 7},
     {'Courage': 3,'Ambition': 8,'Intelligence': 6,'Good': 3},
     {'Courage': 2,'Ambition': 3,'Intelligence': 7,'Good': 8},
     {'Courage': 3,'Ambition': 4,'Intelligence': 8,'Good': 8}]


 

def k_plus_proche_voisin(tab_caractere , profil_carateristique):
    
    k = 5
    
    for perso in tab_caractere:
        distance = 0
        somme_carré = 0
        for caracteristique in profil_carateristique:
            somme_carré += abs(int(perso[caracteristique]) - profil_carateristique[caracteristique]) ** 2
        distance = sqrt(somme_carré)
        
        perso['Distance'] = distance
    
    
    tab_caractere.sort(key= lambda x: x['Distance'])
    tab_k_plus_proche_voisin = tab_caractere[:k]
    
    return tab_k_plus_proche_voisin
    

print(k_plus_proche_voisin(poudlard_characters, test_tab[0]))

'''
def profil_maison(tab_profils_plus_proche):
    Gryffindor = 0
    Hufflepuff = 0
    Slytherin
    for personnage in tab_profils_plus_proche_plus_proche:
'''
