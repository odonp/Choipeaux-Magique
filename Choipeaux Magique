"""
Choixpeaux Magique


REGLES:


AUTEURS:
Malik Chouchane 
Samy Mouktadi Billah
Odon Prouille

LICENCE:



VERSION:



DATE DE DERNIERE REVISION:



ADRESSE GITHUB: 
https://github.com/odonp/Choixpeaux-Magique

"""


'''
  Mettre des couleurs si possible, c'est plus visuel
'''



# coding: utf-8

#import des modules

import csv
from math import sqrt



#définition des constantes



profils_tab = \
    [{'Courage': 9,'Ambition': 2,'Intelligence': 8,'Good': 9},
     {'Courage': 6,'Ambition': 7,'Intelligence': 9,'Good': 7},
     {'Courage': 3,'Ambition': 8,'Intelligence': 6,'Good': 3},
     {'Courage': 2,'Ambition': 3,'Intelligence': 7,'Good': 8},
     {'Courage': 3,'Ambition': 4,'Intelligence': 8,'Good': 8}]


#définition des variables 

poudlard_characters = []


#définition des fonctions dans l'ordre d'utilisation



#! La valeur de k sera fixée à 5 par défaut. !#



'''
Début du programme 1ere partie
'''


#ouvre le csv "Characters"
with open("Characters.csv", mode='r', encoding='utf-8') as f:
    reader = csv.DictReader(f, delimiter=';')
    characters_tab = [{key : value for key, value in element.items()} for element in reader]
    

#ouvre le csv "Caracteristiques_des_persos"
with open("Caracteristiques_des_persos.csv", mode='r', encoding='utf-8') as f:
    reader = csv.DictReader(f, delimiter=';')
    caractéristique_tab = [{key : value for key, value in element.items()} for element in reader]



# On fait la fusion en rajoutant la maison de chaque personnage
for poudlard_character in caractéristique_tab:
    for kaggle_character in characters_tab:
        if poudlard_character['Name'] == kaggle_character['Name']:
            poudlard_character['House'] = kaggle_character['House']
            poudlard_characters.append(poudlard_character)



def k_plus_proche_voisin(tab_caracteres, profil_carateristiques, k):
    
    
    for perso in tab_caracteres:
        distance = 0
        somme_carré = 0
        for caracteristique in profil_carateristiques:
            somme_carré += abs(int(perso[caracteristique]) - profil_carateristiques[caracteristique]) ** 2
        distance = sqrt(somme_carré)
        
        perso['Distance'] = distance
    
    
    tab_caracteres.sort(key= lambda x: x['Distance'])
    tab_k_plus_proche_voisin = tab_caracteres[:k]
    
    return tab_k_plus_proche_voisin








def maison_profil(persos_proches ):
    dico_maison = {'Gryffindor' : 0, 'Ravenclaw' : 0, 'Slytherin' : 0, 'Hufflepuff' : 0}
    
    for perso in persos_proches:
        dico_maison[perso['House']] += 1
        
    list_maison = list(dico_maison.items())
    
    list_maison.sort(key=lambda x: x[1], reverse=True)

    return list_maison
    
    


k = int(input("Donner une valeur de k : "))   

for profil in profils_tab:
    print(f"\n\n\n Les 5 personnages les plus proches du profil ayant pour caracteristique {profil} sont :\n")
    for perso_proche in k_plus_proche_voisin(poudlard_characters, profil, k):
        print(f" - {perso_proche['Name']} de la maison {perso_proche['House']} est à une distance de {perso_proche['Distance']}")
    maison = maison_profil(k_plus_proche_voisin(poudlard_characters, profil, k))
    print(f"\nLa maison du profil est {maison[0][0]}")
